6. Explain about JSON Web Tokens (JWT) and why they are very suited for a REST-based API

What is a JWT?

JSON Web Token (JWT) is a JSON-based open standard (RFC 7519) for passing claims between parties in web application environment. The
tokens are designed to be compact, URL-safe and usable especially in web browser single sign-on (SSO) context. JWT claims can be typically
used to pass identity of authenticated users between an identity provider and a service provider, or any other type of claims as required
by business processes. The tokens can also be authenticated andencrypted.

JWT relies on other JSON-based standards: JWS (JSON Web Signature) RFC 7515 and JWE (JSON Web Encryption) RFC 7516.

JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA

Benefits of JWT:

•	They are Compact: Because of its smaller size, JWTs can be sent through an URL, POST parameter, or inside an HTTP header.
•	 The payload contains all the required information about the user, avoiding the need to query the database more than once

JSON Web Tokens consist of three parts separated by dots:     xxxxxx.yyyyyy.zzzzzz   (Header. Payload. Signature)

The header typically consists of two parts: the type of the token (=JWT), and the hashing algorithm being used (HMAC SHA256 or RSA)
{ "typ": "JWT",
  "alg": "HS256" }

Payload The second part of the token is the payload, which contains the claims. Claims are statements about an entity (typically, the user)
and additional metadata. There are three types of claims: reserved, public, and private claims (next slide).
{ "sub": "1234567890",
  "name": "John Doe",
  "admin": true }

The signature part is created by taking the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign
that.
The signature is used to verify that the sender of the JWT is who it says it is and to ensure that the message wasn't changed along the way.
Using the HMAC SHA256 algorithm, the signature will be created in the following way:
  HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)

Why are JWT well suited for RES- based API?

JSON Web Tokens (JWT) are a more modern approach to authentication. As the web moves to a greater separation between the client and server, JWT provides a wonderful alternative to traditional cookie based authentication models.
JWTs provide a way for clients to authenticate every request without having to maintain a session or repeatedly pass login credentials to the server.
In other words JWT is a fantastic and simple way to communicate trusted information across untrusted channels.

Links:
http://blog.brainattica.com/restful-json-api-jwt-go/		Also code ex. Here.
http://js2016.azurewebsites.net/security2/security2.html#4
