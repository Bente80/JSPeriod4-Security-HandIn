5. Explain about password hashing, salts and the difference between bcrypt and older (not recommended) algorithms like sha1, md5 etc.
Password hashing

A one-way hash function is an algorithm that turns messages or text into a fixed string of digits, called the Cryptographic hash value or
the Digest).
A one-way hash function takes variable-length input ex. a message of any length (even thousands or millions of bits) and produces a
fixed-length output; say, 160-bits. This is great for protecting passwords, because we want to store passwords in a form that protects
them even if the password file itself is compromised, but at the same time, we need to be able to verify that a user's password is correct.

Ex.   	hash("hello")             = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824

The hash function ensures that, if the information is changed in any way—even by just one bit—an entirely different output value is
produced.
One way indicates that it's (almost) impossible to derive the original text given the digest.
One-way hashing is though not enough for passwords, because although the algorithm makes a unick kode, anyone can easily translate this
hashed code just by using a link like:      https://crackstation.net/  Therefore we have to use salts as well as hashing by employ salted
password hashing.

Here you can see how to make password hashing in Node:         https://www.npmjs.com/package/password-hash

Salt
In cryptography, a salt is random data that is used as an additional input to a one-way function that "hashes" a password or passphrase.
The primary function of salts is to defend against dictionary attacks versus a list of password hashes and against pre-computed rainbow
table attacks.
A new salt is randomly generated for each password. In a typical setting, the salt and the password are concatenated and processed with a
cryptographic hash function, and the resulting output (but not the original password) is stored with the salt in a database. Hashing allows
for later authentication while protecting the plaintext password in the event that the authentication data store is compromised.
In short terms: A salt is a random string that is appended or prepended to the password before it is hashed. This randomizes the same
password completely each time, as the string is different. Se an example below:

hash ("hello" + "QxLUF1bgIAdeQX") = 9e209040c863f84a31e719795b2577523954739fe5ed3b58a75cff2127075ed1
hash ("hello" + "bv5PehSMfV11Cd") = d1d3ec2e6f20fd420d50e2642992841d8338a314b8ea157c9e18477aaef226ab

The salt does not need to be secret. Just by randomizing the hashes, an attacker won't know in advance what the salt will be, so they can't
pre-compute. If each user's password is hashed with a different salt, the reverse lookup table attack won't work either.

The salt should not be too short. Otherwise an attacker can build a lookup table for every possible salt. A good rule of thumb is to
use a salt that is the same size as the output of the hash function.
Furthermore the username shouldn't be used as a salt. Usernames may be unique to a single service, but they are predictable and often
reused for accounts on other services. An attacker can build lookup tables for common usernames and use them to crack username-salted
hashes.
Cryptographic salts are broadly used in many modern computer systems, from Unix system credentials to Internet security.

Bcrypt is an algorithm that uses Blowfish internally. It is not an encryption algorithm itself. It is used to irreversibly obscure passwords,
just as hash functions are used to do a "one-way hash". It does this by using Blowfish to encrypt a magic string, using a key "derived"
from the password. Later, when a user enters a password, the key is derived again, and if the ciphertext produced by encrypting with that
key matches the stored ciphertext, the user is authenticated. The ciphertext is stored in the "password" table, but the derived key is
never stored.

The reason why this is so secure is that in order to break the cryptography here, an attacker would have to recover the key from the
ciphertext. This is called a "known-plaintext" attack, since the attack knows the magic string that has been encrypted, but not the key
used. Blowfish has been studied extensively, and no attacks are yet known that would allow an attacker to find the key with a single known
plaintext.

MD5 and SHA1 are general purpose hash functions, designed to calculate a digest of huge amounts of data in as short a time as possible.
This means that they are fantastic for ensuring the integrity of data and utterly rubbish for storing passwords.

The difference between older versions like MD5 and SHA1 and bcrypt is that while bcrypt is far slower. This is also what makes MD5 and
SHA1 weak, because they are so fast.
A modern server can calculate the MD5 hash of about 330MB every second. If your users have passwords which are lowercase, alphanumeric, and
6 characters long, you can try every single possible password of that size in around 40 seconds. With bcrypt instead of the server cracking
a password every 40 seconds, I’d be cracked in 12 years or even not at all. This is illustrated in the example below.

Another difference is that MD5 and SHA1 are hashing algorithms, where as bcryp uses Blowfish (to make an encryption algorithm).

The most important difference is that bcrypt has not been haked where as both sha1 & md5 have been.

Ex.  Of hashing the word: password.

MD5 	76c8245727d68a781e98288f147184b5:5b0f4bf8fec9b53879a5bb929172c153
SHA1	fecbb8d3eb7c9af4fcf61a8722a52d84428ab519:7ac4cd7db7a9d9d7abb5c7ebb46aa9265c941f87
BCrypt	$2a$10$ppsVmqeIhoD.XjE1Zdmj4.fjH2HZblKGycmpgU3SA2UB4cbo4nPLG

Hash rate - Using oclHashcat-Plus I ran a check against each to see the hash rate. Unfortunately due to a driver error,
            I couldn't run a check against a Bcrypt hash, so I used the weaker md5crypt instead.
Hashing Mechanism	Tries per second
MD5		            5,357,000
SHA1		        3,673,000
md5Crypt		    12114

CPU Based Cracking - The numbers below are using the CPU to crack the exact same hashes as before.
Hashing Mechanism	Time to generate
MD5		            0.008s
SHA1		        0.012s
BCrypt (cost 10)	0.012s

Other Links:
http://js2016.azurewebsites.net/security2/security2.html#12
https://crackstation.net/hashing-security.htm
https://en.wikipedia.org/wiki/Salt_(cryptography)
https://www.bentasker.co.uk/blog/security/201-why-you-should-be-asking-how-your-passwords-are-stored
http://stackoverflow.com/questions/1561174/sha512-vs-blowfish-and-bcrypt
https://codahale.com/how-to-safely-store-a-password/
https://news.ycombinator.com/item?id=2004962


